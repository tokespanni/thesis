#version 430

layout(local_size_x = 1, local_size_y = 1) in;

layout(binding = 0) uniform atomic_uint counter;

struct photon
{
	vec3 color;
	float birthTime;
	vec2 speed;
	float wavelength;
	float birthPower;
};
restrict layout(std430, binding = 1) buffer photonBuffer
{
	photon photons[];
};

restrict layout(std430, binding = 2) buffer emptyIndices
{
	int ind[];
};

restrict layout(std430, binding = 3) buffer posBuffer1
{
	vec4 pos1[];
};
restrict layout(std430, binding = 4) buffer posBuffer2
{
	vec4 pos2[];
};
layout(location = 0) uniform float deltaTime;
layout(location = 1) uniform float totalTime;

void main()
{	
	uint index = gl_GlobalInvocationID.x;
	if(photons[index].speed == vec2(0)) return;
	
	//move photon
	pos2[index].x = pos1[index].x + photons[index].speed.x * deltaTime*0.5;
	pos2[index].y = pos1[index].y + photons[index].speed.y * deltaTime*0.5;
	pos2[index].z = totalTime - photons[index].birthTime;
	
	if (length(pos2[index].xy) > 0.90)
	{
		int i = int(atomicCounterIncrement(counter) - 1073741824);
		ind[i] = int(index);
		pos1[index].xy = vec2(0.75, 0.75);
		pos2[index].xy = vec2(0.75, 0.75);
		photons[index].speed = vec2(0, 0);
		photons[index].birthPower = 0; //photons[index].birthPower /float(totalTime - photons[index].birthTime);
		//photons[index].color *= photons[index].power;
	}
	
}
#version 430

layout(local_size_x = 1, local_size_y = 1) in;

layout(binding = 0) uniform atomic_uint counter;

restrict layout(std430, binding = 1) buffer posBuffer
{
	vec2 pos[];
};
restrict layout(std430, binding = 2) buffer speedBuffer
{
	vec2 speed[];
};
restrict layout(std430, binding = 3) buffer emptyIndices
{
	int ind[];
};
layout(location = 0) uniform float time;

void main()
{	
	uint index = gl_GlobalInvocationID.x;
	if(speed[index] == vec2(0)) return;
	
	//move photon
	pos[index].x += speed[index].x * time*0.5;
	pos[index].y += speed[index].y * time*0.5;
	
	if (length(pos[index]) > 0.90)
	{
		int i = int(atomicCounterIncrement(counter) - 1073741824);
		ind[i] = int(index);
		pos[index] = vec2(0.75, 0.75);
		speed[index] = vec2(0, 0);
	}
	
}
#line 2 "simulationOfPhotons_end"

const float EPS = 0.0005;
#define DiffMethod2(fn,pt,h) (fn(pt+2*h) - fn(pt-2*h))/(2*EPS)								//second order method
#define DiffMethod4(fn,pt,h) (fn(pt-2*h) - 8*fn(pt-h) + 8*fn(pt+h) - fn(pt+2*h))/(12*EPS)	//forth order method
#define DiffU2(fn,pt)		DiffMethod2(fn,pt, vec2(EPS,0))
#define DiffV2(fn,pt)		DiffMethod2(fn,pt, vec2(0,EPS))
#define DiffU4(fn,pt)		DiffMethod4(fn,pt, vec2(EPS,0))
#define DiffV4(fn,pt)		DiffMethod4(fn,pt, vec2(0,EPS))

vec3 f(vec2 uv){	return ff(uv);}
vec3 dfu(vec2 uv){	return DiffU2(f,uv);}
vec3 dfv(vec2 uv){	return DiffV2(f,uv);}

vec4 F(vec4 Omega)
{
	vec2 p = Omega.xy;
	
	mat2x3 df = mat2x3(dfu(p), dfv(p));
	mat2x3 ddu = mat2x3(DiffU4(dfu,p), DiffV4(dfu,p));
	mat2x3 ddv = mat2x3(ddu[1],		   DiffV4(dfv,p));
	
	mat2 Gauss = transpose(df) *df;
	float E = Gauss[0][0], F = Gauss[0][1], G = Gauss[1][1];
	
	
	mat2 dGaussU = transpose(df) * ddu + transpose(ddu) * df;
	mat2 dGaussV = transpose(df) * ddv + transpose(ddv) * df;
	
	float Eu = dGaussU[0][0];
	float Ev = dGaussV[0][0];
	float Fu = dGaussU[0][1];
	float Fv = dGaussV[0][1];
	float Gu = dGaussU[1][1];
	float Gv = dGaussV[1][1];
	
	float denom = 2*determinant(Gauss);
	
	//Christoffel symbols
	
	float k1_11 = + G*Eu - 2*F*Fu + F*Ev;
	float k2_11 = - E*Ev + 2*E*Fu - F*Eu;
	float k1_12 = + G*Ev - F*Gu;
	float k2_12 = - F*Ev + E*Gu;
	float k1_22 = - G*Gu + 2*G*Fv - F*Gv;
	float k2_22 = + E*Gv - 2*F*Fv + F*Gu;
	
	mat2 K1 = mat2(k1_11, k1_12, k1_12, k1_22)/denom;
	mat2 K2 = mat2(k2_11, k2_12, k2_12, k2_22)/denom;
	
	vec2 v = Omega.zw;
	vec2 ddOmega = -v*mat2(K1*v, K2*v);

	return vec4(v, ddOmega);
	
}

vec4 Euler(vec4 posvel, float delta_t)
{
	return delta_t*F(posvel) + posvel;
}
vec4 Midpoint(vec4 yk, float h)
{
	return yk + h*F(yk+0.5*h*F(yk));
}


void main()
{	
	uint index = gl_GlobalInvocationID.x;
	if(photons[index].speed == vec2(0)) return;
	
	vec2 position = pos1[index].xy;
	vec2 velocity = normalize(photons[index].speed)*0.1;
	vec4 posVel = vec4(position,velocity);
	const int N = 2;
	for(int i=0; i<N; ++i)
		posVel = Midpoint(posVel,deltaTime/float(N));
	
	position = posVel.xy;
	velocity = posVel.zw;
	float time = totalTime - photons[index].birthTime;
	
	if(photons[index].power / time < minPhotonEnergy)
	{
		position = vec2(-2, -2);
		velocity = vec2(0);
		int i = int(atomicCounterIncrement(counter) - 1073741824);
		ind[i] = int(index);
	}

	pos2[index] = vec4(position,time,0);
	photons[index].speed = velocity;
}
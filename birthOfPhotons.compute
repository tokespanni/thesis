#version 430

layout(local_size_x = 1, local_size_y = 1) in;

layout(binding = 0) uniform atomic_uint counter;

struct photon
{
	vec3 dummy;
	float birthTime;
	vec2 speed;
	float wavelength;
	float power;
};
struct light
{
	vec2 pos;
	float power;
	float c_photon;
	float i_photon_start;
	float i_photon_end;
	float wavelength;
	float dummy;
};
restrict layout(std430, binding = 1) buffer photonBuffer
{
	photon photons[];
};

restrict layout(std430, binding = 2) buffer emptyIndices
{
	int ind[];
};

restrict layout(std430, binding = 3) buffer posBuffer
{
	vec4 pos[];
};

restrict readonly layout(std430, binding = 4) buffer lightSourceBuffer
{
	light lights[];
};

layout(location = 0) uniform float totalTime;
layout(location = 1) uniform int photonBirthCount;
layout(location = 2) uniform int lightSourceNum;
layout(location = 3) uniform float totalPower;

photon photon_pos_angle_wavelength()
{
	int ind = int(gl_GlobalInvocationID.x); //which photon
	int i = 0;
	while(ind < int(lights[i].i_photon_start) || ind > int(lights[i].i_photon_end)) {i++;} 
	const float pi = 3.141592;
	float alpha = 2.0 * pi * float(ind - lights[i].i_photon_start) / float(lights[i].c_photon);
	photon p;
	p.dummy = vec3(0);
	p.dummy.xy = lights[i].pos;
	//p.speed = lights[i].dummy * vec2(cos(alpha), sin(alpha)) * 0.1;
	p.speed = vec2(cos(alpha), sin(alpha)) * 0.1;
	p.birthTime = totalTime;
	p.power = lights[i].power;
	p.wavelength = lights[i].wavelength;
	return p;
}

void main()
{	
	uint i = atomicCounterDecrement(counter);
	
	if (i < 1073741824) //=2^30
	{
		atomicCounterIncrement(counter);
	}
	else
	{
		int index = ind[i-1073741824];
		/*vec4 paw = photon_pos_angle_wavelength();
		photon p;
		pos[index].xy = paw.xy;
		pos[index].z = totalTime;
		p.speed = vec2(cos(paw.z), sin(paw.z)) * 0.1;
		p.birthTime = totalTime;
		p.power = totalPower / photonBirthCount;
		p.wavelength = paw.w;
		p.dummy = vec3(0, 0, 0);
		*/
		photon p = photon_pos_angle_wavelength();
		pos[index].xy = p.dummy.xy;
		pos[index].z = p.birthTime;
		photons[index] = p;
	}
}
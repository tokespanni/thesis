#version 430

layout(local_size_x = 1, local_size_y = 1) in;

layout(binding = 0) uniform atomic_uint counter;

restrict layout(std430, binding = 1) buffer posBuffer
{
	vec2 pos[];
};

restrict layout(std430, binding = 2) buffer speedBuffer
{
	vec2 speed[];
};

restrict layout(std430, binding = 3) buffer emptyIndices
{
	int ind[];
};

restrict readonly layout(std430, binding = 4) buffer lightSourceBuffer
{
	vec2 lightSourcePos[];
};
void main()
{	
	uint i = atomicCounterDecrement(counter);
	if (i < 1073741824)
	{
		atomicCounterIncrement(counter);
	}
	else
	{
		const float pi = 3.141592;
		uint local_index = gl_GlobalInvocationID.x;
		float alpha = 2.0*pi*float(local_index)/float(gl_NumWorkGroups.x);
		int index = ind[i-1073741824];
		pos[index] = lightSourcePos[gl_WorkGroupID.x];
		speed[index] = vec2(cos(alpha), sin(alpha));
	}
}